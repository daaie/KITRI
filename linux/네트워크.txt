1. OSI 7계층				TCP/IP Protocol
//각 계층이 기능.... 7계층을 4개의 층으로 나눈걸 프로그래밍함..
Application ---------------------------	Application(ftp, telnet, dns...)
Presentation
Session
(네트워크하나의 연결)
Transport ------------------------------ Transport(TCP, UDP)
(목적지 ip주소에 데이터가 갔는지 순서가 맞는지 에런 없는지 체크,
어떤 라우팅으로 길을 찾아가야함)
(네트워킹 -> 프로토콜(약속)의 집합.통신규약) 
(TCP는 맨처음 연결한길을 계속 사용.신뢰성 제공.연결 지향성,체크할게 많아 느려)
(udp는 받았건 안받았건 체크안하고 쏴버림. 패키지를 보낼때마다 가능한 길 사용..신뢰성 낮지만 빠름)
Network ------------------------------- Internet(IP, ARP, RARP)
(ip사용 실제 논리 주소..외부 인터넷으로 보내기만함) 
Data Link ----------------------------- Network Interface
(내부 로컬 데이터 주고받기, ip사용안함.물리적인 목적지 주소를 통해 전달)
Physical 
(랜선통해서..010101 가는것)

물데네전세프응

<전송 계층>

2. TCP
-연결 지향성 프로토콜

프로세스간 통신(원격뿐만아니라 컴퓨터 내부)
연결성립과 연결 종료
신뢰성 있는 Packet전송
연속되는 Packet 전송
Data Overflow 방지를 위한 Flow Control
Error Control

3. TCP Error Control
    - TCP는 오류제어를 통하여 신뢰성을 제공한다.
    - 오류 감지 및 정정을 위한 매커니즘 제공

오류 상황
   . 손상 세그먼트 (비트가 꺠짐..등)
   . 손실 세그먼트
   . 순서가 어긋난 세그먼트
   . 중복 세그먼트

오류 발견과 정정
   . Checksum
   . 확인응답
   . 시간초과

4. UDP(User Datagram Protocol)

    - 비 연결 지향성 프로토콜
    - Port no.에 의한 프로세스 구분(tcp에서도 씀)
//고정적 port번호 well known...ftp 20, http 80, telnet 23, oracle 8080 얘가 아파치랑 중복되면 바꿔주면댐 
    - 상위 애플리케이션에서 reliability， message loss， duplication， delay ， 
         loss of connectivity를 체크하고 관리 
//udp는 체크안하니까 어플에서 해야함..속도가 빠름. 브로드 멀티 테스크에 사용
    - TCP의 오버헤드를 피하고자 하는 경우
    - broadcast 및 multicast 사용시

5. Internet Layer Protocol (ip layer)
    - 라우팅
    - 상위 레이어에 단 하나의 네트워크 인터페이스 제공

IP(Internet Protocol)
ICMP(Internet Control Message Protocol)
ARP(Address Resolution Protocol)
RARP(Reverse Address Resolution Protocol)    

*IP
-OSI 네트워크 계층에서 호스트의 주소지정과 패킷 분할 및 조립 기능을 담당한다.
-IP는 비신뢰성(unreliability)과 비연결성(connectionlessness)이 특징.
//체크안함

단편화(Fragmentation)
//패킷단위로 데이터를 쪼개줌
   - 데이타그램의 크기 조절기능(확장성)
   - 수신측에서는 재조립(reassemble)
   - 헤더에 같은 값의 Identification 
   - MTU(Maximum Transfer Unit)의 길이에 따라 나누어 보냄

*ARP(Address Resolution Protocol)
    - IP Address를 MAC Address로 변환해주는 Protocol
    - ARP는 Local Broadcasting에 의존한다.
    - 한번 찾은 Address는 ARP Cache에 일정기간  보관

*RARP(Reverse Address Resolution Protocol)
    - MAC Address로부터 IP Address로의 변환
    - 네트워크는 RARP 서버를 포함해야 한다.

*ICMP(Internet Control Message Protocol)
    - 인터넷상의 라우터 및 호스트가 전송상의 에러를 보고하고, 
      노드간 통신에 있어 제어를 위한 메시지를 보고하게 할 목적으로
      만들어진 프로토콜 
    
6. 네트워크 주소
Address Class			NetID : HostID (네트워크아이디 =동네이름 : 호스트아이디 =번지) 
						4바이트를 나눠씀
CLASS A : 1 ~ 126,         	1:3 대형   그룹 2의 8승개, 호스트 2의 24승개
CLASS B : 128 ~ 191		2:2 중대형 그룹 2의 16승개, 호스트 2의 16승개
CLASS C : 192 ~ 223		3:1
CLASS D : 224 ~ 239		Multicast Address
CLASS E : 240 ~ 255		reserved

하나의 그룹을 쪼개는거 ->서브넷 2의 8승개 방을 2의 4승개로 분리
Subnet Mask의 이용
관리의 편리성

   - 같은 subnet인지
    - 같은 네트웍의 다른 subnet인지
    - 다른 네트웍인지를 알 수 있다
ex> 	255.0.0.0	(A)
	255.255.0.0	(B)
	255.255.255.0	(C)
목적
    - 할당 받은 IP Address를 효과적으로 사용
    - 네트웍 Traffic 관리 및 제어 
    - 네트웍 성능의 최적화
    - 관리의 간편성

방법
    - hostID의 일부를 netID로 사용

ex>
IP Address(131.108.2.160)의 Subnet Mask :

255.255.0.0
255.255.255.0

Network Address = 192.168.10.0 , SubnetMask = 255.255.255.192

동네 점프
6. IP Routing
    - 한 네트웍에서 다른 네트웍으로 Packet을 이동시키는 과정과
      네트웍 안의 호스트에게 Packet을 배달하는 과정

Direct Delivery
    - 패킷의 발신지와 목적지가 동일 네트워크에 존재
    - 최종 라우터와 목적지 호스트 사이에 수행
    - 목적지 주소에서 netid를 추출하여 네트워크 주소와 비교
    - 주소가 같으면 직접 전달이 수행 

Indirect Delivery
    - 발신지와 목적지가 다른 네트웍인 경우
    - 여러 라우터를 경유하여 전달
    - 라우팅 테이블에서 다음 라우터의 IP주소를 찾는다. 

Routing Table
    - 패킷 전송의 경로를 판단하기 위한 기준치들의 모음

Routing Metric
    - route(경로)들을 서로 비교하는데 사용되는 비용 측정치


8. 소켓
     - 1982년 BSD(Berkeley Software Distribution) UNIX 4.1에서 처음 소개

     - 1986년 BSD UNIX 4.3에서 개정된 것이 널리 쓰임

     - 소프트웨어로 작성된 통신의 접속점

     - 응용프로그램이 TCP/IP를 이용 할 수 있는 창구 역할 (연결고리)

     - 응용 프로그램은 소켓을 이용하여 통신망에 데이터를 송.수신

구성 
     - 소켓 생성시 file descriptor와 같은 기능을 하는 socket descriptor 리턴
//리눅스에서는 소캣도 파일처럼 
     - 파일과 소켓이 descriptor table을 공유
     - 한 프로세스에서 descriptor는 중복되지 않는다.



9. 소켓 프로그래밍

1) 주소변환
[ Domain Name ]		[ 32bit binary ]	[ Dotted Decimal ]
-------------------------------------------------------------------------
십진 주소를 바이너리 주소로 변환
#include <arpa/inet.h>

int inet_aton(const char *strptr, struct in_addr *addrptr); (십진주소 str ,바이너리 구조체)

                Rerurns : 1 if string was valid, 0 on error

 -strptr이 가리키는 문자열을 32비트 네트워크 바이트 순서의 이진값으로 바꾼다
-----------------------------------------------------------------------------------
십진 주소를 바이너리 주소로 변환
#include <arpa/inet.h>

in_addr_t  inet_addr(const char *strptr); //십진주소를 바이너리 주소 구조체로 반환

                  Rerurns : 32-bit binary network byte, INADDR_NONE if error

 -32비트 네트워크 바이트 순서의 이진값을 리턴한다.
 -오류 발생시 32비트가 모두 1인 상수 INADDR_NONE을 돌려준다.

주소를 저장할 수 있는 구조체 타입
struct sockaddr_in{
        short                  sin_family;
        unsigned short    sin_port;
        struct  in_addr     sin_addr;
        char                   sin_zero[8]; //사용안하고있음.
};

sin_family
주소 패밀리 (반드시 AF_INET)

sin_port
네트웍 바이트 오더로 이루어진 포트 번호

sin_addr
네트웍 바이트 오더로 이루어진 아이피 번호

sin_zero
사용되지 않는 필드이며 0으로 설정될 수 있다. 

struct   in_addr {
        union { //유니온 -> 메모리를 하나만 할당 받아서 모든 멤버가 공ㅇ용으로 사용
                struct {
                      unsigned  char   s_b1,
                                              s_b2,
                                              s_b3,
                                              s_b4;
//주소를 한바이트씩 쪼갬
                }  S_un_b;

                struct {
                      unsigned  short  s_w1,
                                              s_w2;
//주소를 2바이트씩 쪼갬
                }  S_un_w;

                unsigned long  S_addr;
//주소를 4바이트 통쨰로 씀

//결론적으로 사이즈는 다 4바이트
        } S_un; 
};
엔디언..4바이트 왼쪽에서 저장할꺼냐 오른쪽부터 저장할거냐 
빅앤디언..모토롤라 프로세서
리튼?앤디어.ㄴ..인텔 프로세서
대부분의 오에스는 앤디언처리를 해주니까
대체로 long타입 하나만 씀.
아닌경우 다른 타입을 써서 순서를 바꿔줘야 할수도 있움..
-sin_addr 필드는 IN_ADDR 타입의 또 다른 구조체. 
프로그램은 IN_ADDR 구조체를 이용하여 IP 어드레스의 각 부분에 접근 할 수 있다.

--------------------------------------------------------------------------------
네트워크 테스트 방화벽 꺼야함
#include <stdio.h>
#include <arpa/inet.h>

int main(int argc,char *argv[])
{
    struct sockaddr_in ip_addr1; 
    struct sockaddr_in ip_addr2; 

    ip_addr1.sin_addr.s_addr = inet_addr (argv[1]);  //아이피주소를 바이너리 주소로 변환
    printf("inet_addr() : dotted decimal(%s) => hexa(%x)\n", 
                          argv[1],ip_addr1.sin_addr.s_addr);  

    inet_aton(argv[1],&ip_addr2.sin_addr); 
    printf("inet_aton() : dotted decimal(%s) => hexa(%x)\n", 
                          argv[1],ip_addr2.sin_addr.s_addr);  
    exit(0);
}
-------------------------------------------------------------------------------
#include <arpa/inet.h>

char  *inet_ntoa(struct in_addr inaddr); //바이너리 주소를 넣으면 십진주소를 문자열 상태로
                               Rerurns : pointer to dotted-decimal string

 -32비트 네트워크 바이트 순서로 된 inaddr을 10진수 문자열로 변환(리턴)한다
---------------------------------------------------------------------------------
#include <stdio.h>
#include <arpa/inet.h>

int main(int argc,char *argv[])
{
    struct sockaddr_in ip_addr; 
    char *ip;

    ip_addr.sin_addr.s_addr = inet_addr (argv[1]); 
    printf("inet_addr() : dotted decimal(%s) => hexa(%x)\n", 
                          argv[1],ip_addr.sin_addr.s_addr);  

    ip = inet_ntoa(ip_addr.sin_addr); 
    printf("inet_aton() : hexa(%x) => dotted decimal(%s)\n", 
                          ip_addr.sin_addr.s_addr,ip);  

    exit(0);
}
-----------------------------------------------------------------------------
#include <netdb.h>

struct  hostent    *gethostbyname(const  char *hostname);

                   Rerurns : nonnull pointer if OK, on error whit h_errno set

 -호스트의 이름을 통하여 네이밍 서비스로 부터 IP주소를 포함한 호스트 정보를  
    리턴
 -h_errno 는 netdb.h에 정의된 에러 상수값으로 set

struct hostent
{ 
    char  * h_name;                 /* 호스트 공식 이름 */ 
    char  ** h_aliases;              /* 호스트 별명들 */ 
    int     h_addrtype;                  /* 호스트 주소의 종류 */ 
    int     h_length;                      /* 주소의 크기(바이트 단위) */ 
    char  **h_addr_list;              /* 주소 리스트 */ 
};
------------------------------------------------------------------------------
#include <stdio.h>
#include <netdb.h>
#include <arpa/inet.h>

int main(int argc, char **argv)
{
    char	*ptr, **pptr;
    char	str[20],temp[20];
    struct hostent	*hptr;
    struct sockaddr_in ip_addr; 
    const u_char *p;
    int i;

    if ( (hptr = gethostbyname(argv[1])) == NULL) {
 	printf("gethostbyname error\n");
 	exit(1);
    }
    printf("official hostname: %s\n", hptr->h_name);
    for (pptr = hptr->h_aliases; *pptr != NULL; pptr++)
         printf("\talias: %s\n", *pptr);

    printf("Address Length : %d\n",hptr->h_length);
    
    for(pptr=hptr->h_addr_list,i=0;*pptr != NULL;pptr++,i++){
          ip_addr.sin_addr.s_addr = *(unsigned long *)hptr->h_addr_list[i];
          printf("address : %s \n",inet_ntoa(ip_addr.sin_addr));          
    }
    exit(0);
}
------------------------------------------------------------------------------------
#include <netdb.h>

struct hostent  *gethostbyaddr(const char *addr, size_t len,int family);

                 Rerurns : nonnull pointer if OK, NULL on error with h_errno set

 -이진의 네트워크 바이트 순서로 된 주소의 포인터를 통하여 호스트 이름을 얻는다.
 -addr 인수는 char *이 아니고 in_addr 구조이다.

--------------------------------------------------------------------------------------
#include <netdb.h>
#include <arpa/inet.h>
int main(int argc,char *argv[])
{
    char **pptr;
    struct hostent	*hptr;
    struct sockaddr_in ip_addr,ip_val; 

    inet_aton(argv[1],&ip_addr.sin_addr); 
    hptr = gethostbyaddr((char *)&ip_addr.sin_addr,4,AF_INET);
//주소 종류 
    printf("official hostname: %s\n", hptr->h_name);

    for (pptr = hptr->h_aliases; *pptr != NULL; pptr++)
	printf("\talias: %s\n", *pptr);

    ip_val.sin_addr.s_addr = *(unsigned long *)hptr->h_addr_list[0];
    printf("address : %s \n",inet_ntoa(ip_val.sin_addr));          
    exit(0);
}
--------------------------------------------------------------------------------------
#include <sys/utsname.h>

int    uname(struct   utsname *name)

          Rerurns : nonnegative value if OK, -1 on error

 -utsname 구조체로 부터 호스트명을 얻을수 있다.
struct utsname{
         char sysname[_UTS_NAMESIZE];             // name of O.S
         char nodename[_UTS_NODESIZE]            // name of node
         char release[_UTS_NAMESIZE]                 // O.S release
         char version[_UTS_NAMESIZE];                // O.S version
         char machine[_UTS_NAMESIZE];              //  hardware type
}

------------------------------------------------------------------------------------
#include <sys/utsname.h>
#include <netdb.h>
#include <arpa/inet.h>
int main()
{
    struct hostent *hptr;


   
    struct utsname myname;    
    struct sockaddr_in ip_addr; 
    
    if(uname(&myname) < 0){
        printf("uname error\n");   exit(1);
    }
    if((hptr=gethostbyname(myname.nodename))==NULL) {
        printf("gethostbyname error\n");     
	exit(1);
    }   
    ip_addr.sin_addr.s_addr = *(unsigned long *)hptr->h_addr_list[0];
    printf("hostname : %s, address : %s \n",myname.nodename,inet_ntoa(ip_addr.sin_addr));          
    
    exit(0);
}
---------------------------------------------------------------------------------------
#include <unistd.h>

int    gethostname(char   *name, size_t  namelen);
//현재 컴퓨터의 호스트 이름을 저장
               Returns : 0 if OK, -1 on error

 -name인자에 호스트 명을 반환
---------------------------------------------------------------------------------------
2)TCP/UDP Socket API
*tcp protocol
	클라이언트		서버
	socket()		socket() //큰관문 소켓오픈
				bind()	 //포트랑 주소 아이피를 붙여줌	
				listen() //동시에 접속하는 클라이언트 여럿..?
					 //클라이언트를 저장해야함

	connect()   ------>	accept() //클라이언트가 acc하면 작은소켓 오픈 
					 //서버가 클라이언트랑 일대일->프로세스나 쓰레드

	recv()	    ------>	send()

	send()	    ------>	recv()

	close()	    ------>	종료

	<client>		<server>

*udp protocol
	socket()		socket()
				bind()

	sendto()    ------	recvfrom()

	recvfrom()  ------	sendto()

	close()	    ------>	종료

	<client>		<server>

-------------------------------------------------------
#include <sys/socket.h>
	int socket(int family(주소체계), int type, int protocol); //소켓오픈
◆Protocol Family

- 인터넷 프로토콜 체게
- 표준에서는 PF_XXX 이용을 권장
- Protocol Family :  PF_XXX
- Address Family :  AF_XXX

/* Protocol families.  */
#define PF_LOCAL        1               /* Local to host (pipes and file-domain).  */
#define PF_UNIX         PF_LOCAL   /* Old BSD name for PF_LOCAL.  */
#define PF_FILE         PF_LOCAL   /* Another non-standard name for PF_LOCAL.*/
#define PF_INET         2               /* IP protocol family.  */
#define PF_IPX          4               /* Novell Internet Protocol.  */
#define PF_APPLETALK    5            /* Appletalk DDP.  */
             …
/* Protocol families.  */
#define AF_LOCAL        PF_LOCAL
로컬
#define AF_UNIX         PF_UNIX
#define AF_FILE         PF_FILE
#define AF_INET         PF_INET
인터넷
#define AF_IPX          PF_IPX
#define AF_APPLETALK    PF_APPLETALK

af pf 큰차이없음                …

◆Socket Type

- 소켓의 형태를 지정한다.
- 소켓을 통한 데이터 전송의 의미를 결정

SOCK_STREAM     - 스트림 방식의 소켓 생성 tcp

SOCK_DGRAM      - 데이터그램 방식의 소켓 생성 udp

----------------------------------------------------
#include <stdio.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/socket.h> 
int main() 
{ 
    /* 파일 및 소켓번호 */ 
    int fd1, fd2, sd1, sd2 ; 
    /* 파일 열기 */ 
    fd1 = open("/etc/passwd", O_RDONLY, 0) ; 
    printf("/etc/passwd's file descriptor = %d\n", fd1) ; 

    /* 스트림형 소켓 열기 */ 
    sd1 = socket(PF_INET, SOCK_STREAM, 0) ; 
    printf("stream socket descriptor = %d\n", sd1) ; 
    /* 데이터그램형 소켓 열기 */ 
    sd2 = socket(PF_INET, SOCK_DGRAM, 0) ; 
    printf("datagram socket descriptor = %d\n", sd2) ; 
    /* 또다른 파일 열기 */ 
    fd2 = open("/etc/hosts", O_RDONLY, 0) ; 
    printf("/etc/hosts's file descriptor = %d\n", fd2) ; 
    /* 파일 및 소켓 닫기 */ 
    close(fd2) ; 
    close(fd1) ; 
    close(sd2) ; 
    close(sd1) ; 
}
------------------------------------------------------------
#include <sys/socket.h>
	int bind(int sockfd, const struct sockaddr *myaddr,socklen_t addrlen);

     struct sockaddr_in 
     { 
        short sin_family ;              /* AF_INET */ 
        u_short sin_port ;              /* 16-bit port number */
        struct in_addr sin_addr ;   /*  32bit binary address */ 
        char sin_zero[8] ;              /* unused */ 
     } 

-----------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(int argc, char **argv, char **envp)
{
     int sck_inet, len_inet;               
     struct sockaddr_in adr_inet;
  
     sck_inet = socket(AF_INET,SOCK_STREAM,0);
 
     memset(&adr_inet,0,sizeof adr_inet);
     adr_inet.sin_family = AF_INET;
     //htons()short값을 호스트 바이트 순서를 네트워크 바이트 순서로 변환
     adr_inet.sin_port = htons(9000);  //포트번호가 9000
     inet_aton(argv[1],&adr_inet.sin_addr);
     len_inet = sizeof(adr_inet);
 
     bind(sck_inet,(struct sockaddr *)&adr_inet,len_inet);
     system("netstat -pa --tcp ");
     close(sck_inet);
     return 0;
}
-----------------------------------------------------------
#include <sys/socket.h>
int getsockname(int s, struct sockaddr *name, socklen_t *namelen)
//(소켓번호 s, 주소변수, 주소길이의 주소)
Rerurns : 0 if OK, -1 on error
 -소켓과 연계된 지역 프로토콜 주소를 얻는다.
-------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(int argc, char **argv)
{
    int sck_inet; 
    struct sockaddr_in addr_inet,get_addr;
    int len_inet;               

    sck_inet = socket(AF_INET,SOCK_STREAM,0); //소켓오픈

    memset(&addr_inet,0,sizeof(addr_inet));
    addr_inet.sin_family = AF_INET;
    addr_inet.sin_port = htons(9000);
    inet_aton(argv[1],&addr_inet.sin_addr);

    len_inet = sizeof(addr_inet);
    
    if(bind(sck_inet,(struct sockaddr *)&addr_inet,len_inet)<0){ //포트번호바인딩
        printf("bind error\n");
        exit(1);
    }
    if(getsockname(sck_inet,(struct sockaddr *)&get_addr,&len_inet)<0){ //소켓주소정보읽음
        printf("getsockname error\n");
        exit(1);
    }
    printf("IP : %s, PORT : %u\n",
                inet_ntoa(get_addr.sin_addr),
                (unsigned)ntohs(get_addr.sin_port)); 
                
    close(sck_inet);
    exit(0);
} 
------------------------------------------------------
#include <sys/socket.h>
int  getpeername(int  s,  struct sockaddr *name, socklen_t   *namelen);
//원격컴퓨터에 대한 주소정보 
Rerurns : 0 if OK, -1 on error

 -소켓과 연계된 원격지 프로토콜을 얻는다
---------------------------------------------------------
#include <sys/socket.h>
int listen(int sockfd, int backlog);
//(소켓번호, 대기..동시접속자를 저장하는 배열의 크기)
Return : 0 if OK, -1 on error
- 연결요청을 받아 들이겠다고 선언
----------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(int argc, char **argv, char **envp)
{
     int sck_inet;
     struct sockaddr_in adr_inet;
     int len_inet;               
 
     sck_inet = socket(AF_INET,SOCK_STREAM,0);
 
     memset(&adr_inet,0,sizeof adr_inet);
     adr_inet.sin_family = AF_INET;
     adr_inet.sin_port = htons(9000);
     inet_aton(argv[1],&adr_inet.sin_addr);
     len_inet = sizeof(adr_inet);
     if(bind(sck_inet,(struct sockaddr *)&adr_inet,len_inet)<0)
     { 
           printf("bind error\n");
           exit(0);
     }
     
    if(listen(sck_inet,5)<0)
    {
           printf("bind error\n");
           exit(0);
    }
 
     system("netstat -pa --tcp ");
     close(sck_inet);
     return 0;
}
-----------------------------------------------------------
#include <sys/socket.h>
int accept(int sockfd, struct sockaddr *client,socklen_t *addrlen);
//한명만 기달려
//하나가 접속요청을 하면 수락하고 통신할 소켓을 반환(파일디스크립터로 반환)
//여기서 소켓은 작은 소켓..일대일.
Return : nonnegative descriptor if OK, -1 on error

struct sockaddr *client
          - Client의 연결정보//연결요청할 클라이언트의 정보
          - Client 프로토콜 정보가 필요 없는 경우 NULL 지정
          - 리턴한 socket descriptor를 통하여 send(), recv()
------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>

int main(int argc, char **argv, char **envp)
{
     int sck_inet,new_fd;
     struct sockaddr_in adr_inet,their_addr;
     int len_inet,sin_size;
 
     sck_inet = socket(AF_INET,SOCK_STREAM,0); //큰서버 모든 클라이언트의 접속을 기다리는애
 
     memset(&adr_inet,0,sizeof adr_inet);
     adr_inet.sin_family = AF_INET;
     adr_inet.sin_port = htons(9000);
     inet_aton(argv[1],&adr_inet.sin_addr);
     len_inet = sizeof(adr_inet);
 
     if(bind(sck_inet,(struct sockaddr *)&adr_inet,len_inet)<0){
         printf("bind error\n");
         exit(0);
     }
    if(listen(sck_inet,5)<0){
         printf("bind error\n");
         exit(0);
     }
     sin_size = sizeof(struct sockaddr_in);
     new_fd = accept(sck_inet, &their_addr, &sin_size); 
//클라이언트가 커넥트 호출할떄까지 멈춤
 
 
     system("netstat -pa --tcp ");
     close(sck_inet);
     return 0;
}
-------------------------------------------------------------
//클라이언트 프로그램 

#include <sys/socket.h>
int connect(int sockfd, const struct sockadde *servaddr,socklen_t addrlen);

Return : 0 if OK, -1 on error

- 서버와의 연결을 시도
- 보통 연결 지향 프로토콜인 TCP 클라이언트가 사용한다

struct sockaddr *servaddr
          - 연결하고자 하는 Server의 연결정보 지정
----------------------------------------------------------
#include <sys/socket.h>
int close(int sockfd);

Return : 0 if OK, -1 on error

- 소켓의 사용을 마치려면 해당 소켓 번호를 지정하여 close()를 호출

- 클라이언트나 서버 어느 쪽이 먼저 시작해도 무방

----------------------------------------------------------------------
#include <sys/socket.h>
#include <sys/types.h>
//tcp
int send(int sockfd,char *buff,int nbyte,int flag);
int recv(int sockfd,char *buff,int nbytes,int flag);

//udp
int sendto(int sockfd,char *buff,int nbytes,int flag,
                                 struct sockaddr *to,int addrlen);
int recvfrom(int sockfd,char *buff,int nbytes,int flag,
                                      struct sockaddr *from,int *addrlen);

Return : send or recv bytes if OK, -1 on error

flag
       - 0 : write 함수와 동일한 역할
       - MSG_OOB  : out of band 데이터 송수신 //긴급메세지 빨리가
       - MSG_PEEK : 도착 메시지 엿보기

--------------------------------------------------------------------------
<http 통신> - 클라이언트 프로그램
	    - web서버 이용할거임
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <unistd.h>

#define MAX_STRING_LENGTH 100

int main(int argc, char *argv[])
{
    int sockfd;
    struct sockaddr_in cliaddr;
    char sendmsg[MAX_STRING_LENGTH];
    char recvmsg[MAX_STRING_LENGTH];
    
    if(argc != 2)
    {
        printf("usage : gethtml IP \n");
        exit(0);
    }
    sockfd = socket(PF_INET, SOCK_STREAM (tcp형태), 0);
    
    bzero(&cliaddr, sizeof(cliaddr)); //멤셋이랑 같음..무조건 0으로 미는 것
    cliaddr.sin_family = AF_INET;
    cliaddr.sin_port = htons(80); //80 포트번호는 http웹임
    cliaddr.sin_addr.s_addr = inet_addr(argv[1]);

    connect(sockfd, (struct sockaddr *)&cliaddr, sizeof(cliaddr));

    bzero(sendmsg, MAX_STRING_LENGTH);
    strcpy(sendmsg,"GET /index.html\n"); //웹페이지를 달라는 의미임ㄴ
//번역방식 - 컴파일 or 인터프리트
..인터프리트 한줄한줄 번역해서 실행..저장을안함
컴파일은 저장함 (c/c++) -바이너리만 ..
자바는 두 방식다씀 -바이트코드를 인터프리트로 바이너리로 변환
    send(sockfd, sendmsg, sizeof(sendmsg), 0);

    while (1)
    {
      	bzero(recvmsg, MAX_STRING_LENGTH);
	 if (recv(sockfd, recvmsg, sizeof(recvmsg) - 1, 0) <= 0){
	           break;
	 }
	 printf("%s", recvmsg);
    }
    close(sockfd);
    exit(0);
}

---------------------------------------------------------------------------
<server>
#include <stdio.h> 
#include <errno.h> 
#include <string.h> 
#include <sys/types.h> 
#include <netinet/in.h> 
#include <sys/socket.h> 

#define MYPORT 50000    /* the port users will be connecting to */
#define BACKLOG 10     /* how many pending connections queue will hold */
#define MAXSIZE 100
main()
{
    int sockfd, new_fd;  /* listen on sock_fd, new connection on new_fd */
    struct sockaddr_in my_addr;    /* my address information */
    struct sockaddr_in their_addr; /* connector's address information */
    int sin_size;
    char buf[MAXSIZE];

    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(1);
    }
    my_addr.sin_family = AF_INET;         /* host byte order */
    my_addr.sin_port = htons(MYPORT);     /* short, network byte order */
    my_addr.sin_addr.s_addr = INADDR_ANY; /* auto-fill with my IP */
    bzero(&(my_addr.sin_zero), 8);        /* zero the rest of the struct */

    if(bind(sockfd,(struct sockaddr *)&my_addr,sizeof(struct sockaddr))== -1) {
        perror("bind");
        exit(1);
    }

    if (listen(sockfd, BACKLOG) == -1) {
        perror("listen");
        exit(1);
    }

    sin_size = sizeof(struct sockaddr_in);
    if((new_fd=accept(sockfd,(struct sockaddr *)&their_addr,&sin_size))== -1){
            perror("accept");
            exit(0);
    }
    printf("server:connection from %s\n",inet_ntoa(their_addr.sin_addr));
    printf("Input Message : ");
    fflush(stdin);
    fgets(buf,MAXSIZE,stdin);

    if(send(new_fd,buf,strlen(buf),0) == -1){
            perror("send");
            close(new_fd);
            exit(0);
    }
    close(new_fd);
    close(sockfd);
}
--------
<client>
#include <stdio.h> 
#include <errno.h> 
#include <string.h> 
#include <netdb.h> 
#include <sys/types.h> 
#include <netinet/in.h> 
#include <sys/socket.h> 

#define PORT 50000    /* the port client will be connecting to */
#define MAXDATASIZE 100 /* max number of bytes we can get at once */

int main(int argc, char *argv[])
{
    int sockfd, numbytes;  
    char buf[MAXDATASIZE];
    struct hostent *he;
    struct sockaddr_in their_addr; /* connector's address information */

    if (argc != 2) {
        fprintf(stderr,"usage: %s IP\n",argv[0]);
            exit(1);
    }    
    if ((he=gethostbyname(argv[1])) == NULL) {  /* get the host info */
        herror("gethostbyname");
        exit(1);
    }

    if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("socket");
        exit(1);
    }

    their_addr.sin_family = AF_INET;      /* host byte order */
    their_addr.sin_port = htons(PORT);    /* short, network byte order */
    their_addr.sin_addr = *((struct in_addr *)he->h_addr);
    bzero(&(their_addr.sin_zero), 8);     /* zero the rest of the struct */

    if(connect(sockfd,(struct sockaddr *)&their_addr,sizeof(struct sockaddr))==-1){
        perror("connect");
        exit(1);
    }
     // block
    if ((numbytes=recv(sockfd, buf, MAXDATASIZE, 0)) == -1) {
        perror("recv");
        exit(1);
    }
    buf[numbytes] = '\0';

    printf("Received: %s",buf);
    close(sockfd);

    return 0;
}


