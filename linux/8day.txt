파일 상태와 디렉토리

Stat 구조체

#include <sys/types.h>

struct	stat {
	mode_t	              st_mode; 	// file type & permission 
	ino_t	              st_ino;		 
	nlink_t                st_nlink;     // link count
	uid_t 	              st_uid;
	gid_t 	              st_gid;
	dev_t	              st_dev;        //장치 번호
	dev_t	              st_rdev;		
	off_t	              st_size;
	time_t                st_atime;     // last access
	time_t                st_mtime;    // last modification
	time_t                st_ctime;     // last file status change
	long	              st_blksize;
	long	              st_blocks;
};
--------------------------------------------------------------------------------
파일 형태(File Type) : 파일 종류 

1. 정규파일(Regular File) 
2. 디렉토리 파일(Directory File)
 //리눅스는 장치도 파일로 인식 /dev -> 연결된 장치파일 
3. 블록 특수화일(Block Special File)
4. 문자 특수화일(Character Special File)
5. FIFO(Block Special File)
//피포는 나중에 ipc할떄 inter processor communication
//공유메모리..메세지 큐 프로세서가 공유할 수 있느 ㄴ메모리
// 프로세스간 통신
//프로세서는 분리된 메모리를 사용하니깐
//프로세서가 메모리를 공유하려면 동기화 해야함.
//하나의 테스크가 공유자원을 쓰려면 드러가서 문을 잠궈서 
6. 심볼릭 링크(Symbolic Link File)
//경로추가 ln a.txt b.txt 하나를 가리키지만 이름을 두개 붙여줌
//ln ; 하드 링크 // ln -s : 심볼릭 링크 소프트 링크 ->둘다 원본파일의 내용이 보임
//심볼릭 링크는 c.txt가 a.txt의 경로를 가지는 것
//하드링크는 아이노드 리스트를 공유허ㅏ니까 원본을 지워도 a.txt로 ㄱㅏㄱㅁ


//하드링크는 가리키는게 아이노드 리스트 이기 때문에 누가 원본인지 모름

7. 소켓(socket)

S_ISREG(mode)	:    정규 파일
S_ISDIR(mode)	:    디렉토리 파일sys
S_ISCHR(mode )	:    문자 특수 파일 
S_ISBLK(mode)	:    블록 특수 파일
S_ISFIFO(mode)      :    pipe 또는 FIFO
S_ISLNK(mode)       :    심볼릭 링크
S_ISSOCK(mode)    :    소켓

퍼미션
S_IRUSR                      user_read
S_IWUSR                     user_write
S_IXUSR                      user_execute
S_IRGRP                      group_read
S_IWGRP                     group_write
S_IXGRP                      group_execute
S_IROTH                      other_read
S_IWOTH                     other_write
S_IXOTH                      other_execute
---------------------------------------------------------------------------
real user id,real group id
    - 프로세스를 실제로 실행시키고 있는 사용자의 ID
    - 로그 인을 할때 사용된 ID

effective user ID, effective group ID
    - 파일에 대한 접근 권한을 결정

set user id , group id 설정 안해주면 real user id와 effective user id같음
ls -all 했을 때 S로 설정된대

set user id 로 effective user id 를 real user id로

소유자의 권한을 물려줘야함..?뭔소리..ㅋㅋㅋroot가 user의 패스워드를 다 바꿔줄 수 없음
사용자에게 권한을 줘야함



set-user-ID, set-group-ID 비트 
-----------------------------------------------------------------------------
#include <sys/types.h>
#include <sys/stat.h>
int  stat (const char *pathname, struct stat *buf  );
int  fstat (int filedes, struct stat *buf  );
//원본파일에 대한 정보
int  lstat (const char *pathname, struct stat *buf  ); 
//심볼릭 파일에 대한 정보
------------------------------------------------------------------------------
#include	<sys/types.h>
#include	<sys/stat.h>
int  main(int argc, char *argv[])
{
	int	i;
	struct stat	buf;
	char	*ptr;
	for (i = 1; i < argc; i++) {
		printf("%s: ", argv[i]);
		if (lstat(argv[i], &buf) < 0) {
			perror("lstat( )");  continue;
		}
		if      (S_ISREG(buf.st_mode))	ptr = "regular";
		else if (S_ISDIR(buf.st_mode))	ptr = "directory";
		else if (S_ISCHR(buf.st_mode))	ptr = "character special";
		else if (S_ISBLK(buf.st_mode))	ptr = "block special";
		else if (S_ISFIFO(buf.st_mode))	ptr = "fifo";
		else if (S_ISLNK(buf.st_mode))	ptr = "symbolic link";
		else if (S_ISSOCK(buf.st_mode))	ptr = "socket";
		else			ptr = "** unknown mode **";
		printf("%s\n", ptr);
	}
	exit(0);
}

ln -s test.txt aaa.txt
-------------------------------------------------------------------------------
#include <unistd.h>
int  access (const char *pathname, int mode  );
rwx 존재하냐?


-mode:

  R_OK         test for read permission
  W_OK        test for write permission
  X_OK         test for execute permission
  F_OK         test for existence permission

--------------------------------------------------------------------------------
#include <stdio.h>
#include <unistd.h>
main(int argc,char **argv)
{
    int i;
    
    if(argc < 2){
        printf("usage : access_1 file1 file2 ... fileN\n");
        exit(1);
    }
    for(i=1;i<argc;i++){
        if(access(argv[i],F_OK)!=0){
            printf("%s isn't exist.\n",argv[i]);
            continue;
        }
        
        if(access(argv[i],R_OK)==0)
            printf("User can read %s\n",argv[i]);
        if(access(argv[i],W_OK)==0)
            printf("User can write %s\n",argv[i]);
        if(access(argv[i],X_OK)==0)
            printf("User can execute %s\n",argv[i]);
    }
}	
-----------------------------------------------------------------------------------
#include <sys/types.h>
#include <sys/stat.h>
mode_t  umask (mode_t  cmask );
- umask값을 프로세스 내에서 일시적으로 변경시키는 역할 수행
- 특정 권한을 막는 기능

- 프로세스 내에서 변경된 umask값은 프로세스가 종료 할 때까지만 유효
-----------------------------------------------------------------------------------
#include <stdio.h>
#include <fcntl.h>

main()
{
    if(open("before.test",O_WRONLY | O_CREAT | O_TRUNC,0777)<0){
        printf("1st open call error\n");
        exit(1);
    }
    
    umask(077);		// &(~077) 파일 소유자만 쓰게 해랑
    //유마스크 이후에 오픈하는 파일은 077임

    if(open("after.test",O_WRONLY | O_CREAT | O_TRUNC,0777)<0){
        printf("1st open call error\n");
        exit(2);
    }
}	
------------------------------------------------------------------------------------
#include <sys/stat.h>
#include <sys/types.h>
int  chmod (const char *pathname, mode_t mode  );
//권한 변경
int  fchmod (int filedes, mode_t mode  );
------------------------------------------------------------------------------------
#include	<sys/types.h>
#include	<sys/stat.h>

main(void)
{
	struct stat		statbuf;

	/* turn on set-group-ID and turn off group-execute */

	if (stat("before.test", &statbuf) < 0) {
		perror("stat error for before.test");
		exit(-1);
	}
	if (chmod("before.test", (statbuf.st_mode & ~S_IXGRP) | S_ISGID) < 0){
		perror("chmod error for before.test");
		exit(-1);
//~S_IXGRP)그룹에 대한 실행권한 없앰 ..
/기존의 퍼미션에 추가하는것
	}
	
	/* set absolute mode to "rw-r--r--" */
	if (chmod("after.test", S_IRUSR | S_IWUSR | S_IRGRP | S_IROTH) < 0) {
		perror("chmod error for after.test");
		exit(-1);

//변경하고 요거만 설정함..
	}
}	
-------------------------------------------------------------------------------------
#include <sys/types.h>
#include <unistd.h>
int  chown (const char *pathname, uid_t owner, gid_t group );
//소유자를 바꿈
int  fchown (int filedes, uid_t owner, gid_t group );
int  lchown (const char *pathname, uid_t owner, gid_t group );
---------------------------------------------------------------------------------------
#include	<sys/types.h>
#include	<sys/stat.h>

main(void)
{
	struct stat		statbuf;

	if (lchown("aaa", 0,0)<0){
		perror("chmod error for aaa");
		exit(-1);
//aaa를 루트와 루트 그룹으로 변경
	}
}	
--------------------------------------------------------------------------------------
#include <sys/types.h>
#include <unistd.h>
int truncate(const char *path, off_t length);
int ftruncate(int fd, off_t length);
---------------------------------------------------------------------------------------
#include	<sys/types.h>
#include	<sys/stat.h>

main(void)
{
	struct stat		statbuf;

	if (truncate("trun.txt",10)<0){
//파일 크기가 10을 넘어서면 잘라내라
		perror("truncate error");
		exit(-1);
	}
}
---------------------------------------------------------------------------------------
#include <unistd.h>
int  link (const char *existingpath, const char *newpath  );
//하드링크 함수
link(원래경로, 새경로)
-----------------------------------------------------------------------------------
#include <stdio.h>
main(int argc,char **argv) 
{
	int fd;

  if(argc != 3){
      printf("usage : link_1 existfile newfile\n");
      exit(1);
  }
  if(link(argv[1],argv[2])<0){
      printf("link call error\n");
      exit(2);
  }
}
-----------------------------------------------------------------------------------------
#include <unistd.h>
int  unlink (const char *pathname);
경로제거.
타겟 파일이 제거되는 것은 모든 경로가 다 제거되는 시점
만약 모든 경로가 제거되더라도 프로세스가 사용중이면 사용이 끝날때까지 기다렸다가 제거
--------------------------------------------------------------------------------------
#include	<sys/types.h>
#include	<sys/stat.h>
#include	<fcntl.h>
#include 	<unistd.h>
int main(void)
{
	int fd, len;
	char buf[20];
	if ((fd=open("tempfile", O_RDWR | O_CREAT | O_TRUNC, 0666)) < 0) {
		perror("open error");
		exit(-1);
	}

	unlink("tempfile");
//현재 프로세스가 쓰고잇으니가 언링크해도 파일 삭제가 안됨

	if(write(fd, "How are you?", 12) != 12) {
		perror("write error");
		exit(-1);
	}
	lseek(fd, 0L, SEEK_SET);
	if((len = read(fd, buf, sizeof(buf))) <=0){
		perror("read error");
		exit(-1);
	}
	else  buf[len] = '\0';
	printf("%s\n", buf);
	close(fd);		//실제 파일이 제거되는 시점
  
        if ((fd=open("tempfile", O_RDWR)) < 0) {
		perror("Second open error");
		exit(-1);//이미 없는 파일
	}
	else 
		close(fd);
	exit(0);
}
-------------------------------------------------------------------------------------
#include <stdio.h>
int  remove (const char *pathname);
//경로하나를 삭제하고
마지막 경로일때 파일이 삭제됨
------------------------------------------------------------------------------------
#include <stdio.h>
main(int argc,char **argv) 
{
	int fd;

  if(argc != 3){
      printf("usage : remove_1 oldname  newname\n");
      exit(1);
  }
  if(link(argv[1],argv[2])<0){
      printf("link call error\n");
      exit(2);
  }
  else printf("step1 passed\n");
  
  if(remove(argv[1])<0){
      printf("unlink error\n");
      remove(argv[2]);
      exit(3);
  }
  else printf("step2 passed\n");
  
  printf("success\n");
}	
--------------------------------------------------------------------------------------
#include <stdio.h>
int  rename (const char *oldname, const char *newname );
----------------------------------------------------------------------------------
#include <fcntl.h>
main(int argc,char **argv) 
{
	int fd;

        if(argc != 3){     
                printf("usage : rename_1 oldname  newname\n");
                       exit(1);
        }

	if((fd = open(argv[1],O_RDONLY)) < 0){
  		printf("first open error\n");
		exit(2);
	}
 	else 
	        close(fd);
	     
        if(rename(argv[1],argv[2])<0){
                printf("rename call error\n");
                exit(3);
        }
	if((fd = open(argv[1],O_RDONLY)) < 0){
  		 printf("second open error\n");
		 exit(4);
	}
	if((fd = open(argv[2],O_RDONLY)) < 0){
  		 printf("third open error\n");
		 exit(5);
	}
	exit(0);
}	
------------------------------------------------------------------------------------
#include <unistd.h>
int  symlink (const char *actualpath, const char *sympath );
//파일에 경로가 들어가 있는게 심볼릭링크파일임
------------------------------------------------------------------------------------
#include <stdio.h>
main(int argc,char **argv) 
{
    int fd;

    if(argc != 3){
          printf("usage : symlink_1 actualname symname\n");
          exit(1);
    }
    if(symlink(argv[1],argv[2])<0){
          printf("symlink call error\n");
          exit(2);
    }
    else
          printf("symlink : %s -> %s\n",argv[2],argv[1]);
}
-----------------------------------------------------------------------------------
#include <unistd.h>
int  readlink (const char *pathname, char *buf, int bufsize );
-링크 파일의 내용을 읽는다. 즉 타겟 파일의 경로
-----------------------------------------------------------------------------------
ln -s a.txt b.txt
./프로그램 b.txt
#include <stdio.h>

main(int argc,char **argv) 
{
     int nbyte;
     char buf[50];

     if(argc != 2){
         printf("usage : readlink_1 symname\n");
         exit(1);
     }
     if((nbyte=readlink(argv[1],buf,50))<0){
         printf("readlink call error\n");
         exit(2);
     }
     else
     {
         buf[nbyte] = '\0';
         printf("buf : %s \n",buf);
     }
}
---------------------------------------------------------------------------------
#include <sys/types.h>
#include <utime.h>
int  utime (const char *pathname, const struct utimbuf *times );
---------------------------------------------------------------------------------
Directory
- 일반 파일 및 다른 디렉토리의 이름으로 구성

- dirent 구조체의 항목으로 구성되는 테이블 형식 
   struct    dirent{
      ino_t     d_ino;                               // I-node 번호
      char     d_name[NAME_MAX + 1];    // 파일 이름
   }
-------------------------------------------------------------------------------
#include <sys/types.h>
#include <sys/stat.h>
int  mkdir (const char *pathname, mode_t  mode );
int  rmdir (const char *pathname );
--------------------------------------------------------------------------------
#include <sys/types.h>
#include <dirent.h>
DIR *opendir (const char *pathname);
struct dirent *readdir(DIR *dp);
----------------------------------------------------------------------------------
#include <sys/types.h>
#include <dirent.h>
void rewinddir (DIR *dp);
//커서를 맨앞으로
int closedir (DIR *dp);
------------------------------------------------------------------------------------
#include <unistd.h>
int chdir (const char *pathname);
//cd 명령이랑 같음
int fchdir (int filedes);
----------------------------------------------------------------------------------
#include <unistd.h>
char *getcwd (char *buf, size_t size );
/작업 디렉토리 경로 반환
---------------------------------------------------------------------------------
#include <unistd.h>
#include <stdio.h>

#define PATH_MAX 1024

int main(void)
{
	 char path[PATH_MAX+1];
	 
	 if(chdir("/home/ebiz/cho")<0)
	  	perror("error chdir");
	 else
         {
	      if(getcwd(path, PATH_MAX) == NULL)
	            perror("error getcwd");
	      else	
	            printf("Current working directory changed to %s \n", path);
	  }
}
------------------------------------------------------------------------------------
#include <sys/types.h>
#include <dirent.h>
#include <sys/stat.h>
#include <unistd.h>
#include <stdio.h>

void access_perm(char *perm, mode_t mode)
{
	int i;	
	char permchar[] = “rwx”;
	memset(perm, ‘-’, 10);
	perm[10] = ‘\0’;
	if (S_ISDIR(mode)) perm[0] = ‘d’;
	else if (S_ISCHR(mode)) perm[0] = ‘c’;
	else if (S_ISBLK(mode)) perm[0] = ‘b’;
	else if (S_ISFIFO(mode)) perm[0] = ‘p’;
	else if (S_ISLNK(mode)) perm[0] = ‘l’;
	for (i = 0; i < 9; i++) {
		if ((mode << i) & 0x100)
			perm[i+1] = permchar[i%3];
	}
	if (mode & S_ISUID) perm[3] = ‘s’;
	if (mode & S_ISGID) perm[6] = ‘s’;
	if (mode & S_ISVTX) perm[9] = ‘t’;
}
main(int argc, char *argv[])
{
	DIR *dp;
	struct stat statbuf;
	struct dirent *dent;
	char perm[11];
	char pathname[80];

	if (argc < 2) exit(1);
	
	stat(argv[1], &statbuf);
	if (!S_ISDIR(statbuf.st_mode)) { //디렉토린지 묻는거임..ㅎ
		fprintf(stderr, “%s is not directory\n”,
			argv[1]);
		exit(1);
	}
	if ((dp = opendir(argv[1])) == NULL) {
		perror(“Error:”);
		exit(1);
	}
	printf(“Lists of Directory(%s):\n”, argv[1]);
	while((dent = readdir(dp)) != NULL) {
		sprintf(pathname, “%s/%s”, argv[1],
			dent->d_name);
		lstat(pathname, &statbuf);
		access_perm(perm, statbuf.st_mode);
		printf(“%s %8ld %s\n”, perm,statbuf.st_size,
			dent->d_name);
	}
	closedir(dp);
}
---------------------------------------------------------------------------------
#include <unistd.h>
#include <stdio.h>
#include <dirent.h>
#include <string.h>
#include <sys/stat.h>
#include <stdlib.h>

void printdir(char *dir, int depth)
{
	DIR *dp;
	struct dirent *entry;
	struct stat statbuf;

	if((dp = opendir(dir)) == NULL) {
		fprintf(stderr,”cannot open directory: %s\n”, dir);
		return;
	}
	chdir(dir);
	while((entry = readdir(dp)) != NULL) {
		lstat(entry->d_name,&statbuf);
		if(S_ISDIR(statbuf.st_mode)) {
	/* Found a directory, but ignore . and .. */
			if(strcmp(“.”,entry->d_name) == 0 ||
				strcmp(“..”,entry->d_name) == 0)
				continue;
			printf(“depth=%d , fname=%s/\n”,depth,entry->d_name);
			/* Recurse at a new indent level */
			printdir(entry->d_name,depth+4);
		}
		else printf(“depth=%d , fname=%s/\n”,depth,entry->d_name);
	}
	chdir(“..”);
	closedir(dp);
}
int main()
{
	printf(“Directory scan of /home:\n”);
	printdir(“/home”,0);
	printf(“done.\n”);
	exit(0);
}
