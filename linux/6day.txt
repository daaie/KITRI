1. File System 특징
    - 트리 구조
    - 터미널, 프린터, 디스크 등 모든 주변 장치들도 하나의 파일로 취급한다.
    - 아스키 파일과 이진 파일을 동등하게 취급한다.
    - 모든 파일은 허가모드를 갖는다.!!!!


2. File System 구조
	| partition | partition | partition |
		    |___________|
                          |

        | BootBlock | SuperBlock | inode List | Data Block |

bootblock을 파티션마다 할당 
data block 

Super Block

- 파일 시스템 크기

- 파일 시스템내의 자유 블록의 수

- 파일 시스템내에서 사용 가능한 자유 블록의 리스트

- i-node 리스트의 크기

- 파일 시스템내의 사용 가능한 i-node의 수

- 파일 시스템내의 사용 가능한 i-node의 리스트

각 i-node가 갖는 정보
    . 소유자 ID, 파일 유형(디렉토리냐 블락디바이스냐 캐릭터냐 심볼릭이냐, 파일 접근허가, 파일 접근시간. 링크수(사용하는 프로세서 수..얘가 0이어야 삭제 안전) . 파일 데이터의 주소 . 파일 크기, i-node번호 

//경로는 디렉토리가 가짐..

File Descriptor Table
     - 개별 프로세스 마다 존재(프로세스와 같은 Lifetime)
     - 항목 구성
        . File descriptor
        . Flag
        . File Table Pointer

//file descriptor table..프로세스하나당 하나씩 할당
//fopen 하면 FILE포인터 할당
//open하면 번호를 할당..3번부터 0 읽기 1 쓰기 2..?
//fdt 는 fd | flag | ptr |
//file table ft
//ft 는 cnt | off set| inode table | flag

//flag 는 exec시 fork를 닫아 줄꺼냐 여부
//file descriptor 번호 fd는 0부터 1,2,3, 할당


File Table
     - 파일 시스템에 하나
     - 항목 구성
        . 참조계수(Reference Count)
//링크수
        . 파일의 현재 Offset
//어디까지 읽었나
        . I-node Table을 가리키는 포인터
//i node list의 위치를 알림..
//데이터 블록
//데니터 블록은 페이지가 나눠져잇음..내용이 길면 블록 내 파일이 쪼개짐.
//사용하는 사람은 하나의 텍스트이지만 내부에는 여러개일수도
        . 파일 상태 Flag
//truncate oppend
------------------------------------------------------------------------------------
3. 입출력 System Call
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
int open ( const char *pathname, int oflag);

//파일을 저수준으로 오픈

int open ( const char *pathname, int oflag, mode_t  mode//퍼미션);

oflag : open의 목적
           . O_RDONLY : 읽기 전용
           . O_WRONLY : 쓰기 전용
           . O_RDWR : 읽기, 쓰기 가능

    . O_APPEND : 모든 쓰기 작업은 파일의 끝에서 수행된다.
           . O_CREAT : 파일이 없을 경우 파일을 생성한다.
           . O_EXCL :  O_CREAT시 파일이 있는 경우에 error를 발생시킨다.
           . O_TRUNC : 파일이 있는 경우에 기존 파일을 지운다.
           . O_NONBLOCK : blocking I/O를 nonblocking 모드로 바꾼다.
           . O_SYNC : 매 쓰기 연산마다 디스크  I/O가 발생하도록 설정한다.

mode : 파일의 접근권한
     - 새로운 파일 생성시에만 사용(O_CREAT)
--------------------------------------------------------------------------------------
#include <fcntl.h>
main() 
{
	char *fname = "./test.txt";
	int fd;

	fd = open(fname, O_RDONLY); 
	if (fd > 0)  //fd=3?
	{
		printf("Success\n FileName : %s, fd : %d\n",fname,fd);
		close(fd);
	}
 	else 
	     perror("open failed\n");

//exit함수 의 파라미터는 부모한테 전달됨
//ㅇ
}
-------------------------------------------------------------------------------------
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
       int creat ( const char *pathname,  mode_t  mode ); 

mode : 파일의 접근권한
--------------------------------------------------------------------------------------
#include <fcntl.h>
main() 
{
	char *fname = "test.txt";
	int fd;


	fd = creat(fname, 0666); 

//0은 팔진수라서 붙임...

	if (fd < 0)
		perror("creat( )");
        else{
	     printf("Success!\n Filename :%s, fd :%d\n", fname, fd);
	     close(fd);
	}
}
--------------------------------------------------------------------------------------
#include <unistd.h>
int close(int fd);
--------------------------------------------------------------------------------------
#include <sys/types.h>
#include <unistd.h>
off_t lseek(int fildes, off_t offset, int whence);  //SEEK_SET, SEEK_CUR, SEEK_END
//fildes 파일번호
//offset은 얼마나 떨어진 위치냐 
//whence가 end일 경우 양수가 올 수 없다..뒤에 더이상 자리가 없어서 -나옴..
--------------------------------------------------------------------------------------
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
main()
{
	char *fname = "test.txt";
	int fd;
	off_t fsize;

	if((fd=open(fname, O_RDONLY)) < 0)
	{
		perror("open( )");
		exit(-1); //->stdlib필요
//-1주면 부모가 받음 
	}
	fsize = lseek(fd, 0, SEEK_END);
	printf("The size of <%s> is %lu bytes.\n", fname, fsize);
	exit(0);
}
-------------------------------------------------------------------------------------
#include <unistd.h>
ssize_t  read (int filedes,  void *buf, size_t nbytes);
데이터 사이즈를 반환 0보다 작으면 더이상 읽으게 없는것
-------------------------------------------------------------------------------------
#include <fcntl.h>
main()
{
	int fd, int linecnt =0;
	char c;
	char *fname = "test.txt";
		
	if((fd=open(fname, O_RDONLY)) < 0){
		perror("open( )");
		exit(-1);
	}
        for( ; ; ){ //무한루프
	    if (read(fd, &c, 1) > 0){
		if(c=='\n')    	    linecnt ++ ;
 	    }else
		    break;
	}
	printf("Total line : %d\n", linecnt);
	exit(0);
}
-------------------------------------------------------------------------------------
#include <unistd.h>
ssize_t  write (int filedes,  const void *buf, size_t nbytes);
-----------------------------------------------------------------------------------
#include <fcntl.h>
#include <string.h>
#include <unistd.h>

main()
{
	char *fname = "test2.txt";
	int fd, num=0;
	char buf[255];
	
	fd = open(fname, O_WRONLY);
	if(fd<0){
		printf("file open error");
		exit(1);
	}
	while(1){
		fgets(buf, 255, stdin);
		num=strlen(buf);
		if(!strncmp(buf, "end", 3)){
			break;
		}
		write(fd, buf, num);
	}
	close(fd);
}
-------------------------------------------------------------------------------------
#include <fcntl.h>
#include <string.h>
#include <unistd.h>


//당연히 file descript number는 3,4임
//fd1이 읽어도 fd2는 다시 처음부터 읽음.
//program 1 -> fdt fd 3,4     => file table 의 cnt에 서로 다르게 들어감.
//program 2 -> fdt fd 3
//듀프? 를사용하면 ft에서 같은 cnt 줄을 공유함
main()
{
	char *fname = "test.txt";
	int fd1, fd2, cnt;
	char buf[30];
	
	fd1 = open(fname, O_RDONLY);
	fd2 = open(fname, O_RDONLY);
	if(fd1 < 0 || fd2 < 0) {
		perror("open( )");
		exit (-1);
	}
	cnt = read(fd1, buf, 12);
	buf[cnt] = '\0';
	printf("fd1's first printf : %s\n", buf);
	lseek(fd1, 1, SEEK_CUR);
	cnt = read(fd1, buf, 12);
	buf[cnt] = '\0';
	printf("fd1's second printf : %s\n", buf);
	cnt = read(fd2, buf, 12);
	buf[cnt] = '\0';
	printf("fd2's first printf : %s\n", buf);
	lseek(fd2, 1, SEEK_CUR);
	cnt = read(fd2, buf, 12);
	buf[cnt] = '\0';
	printf("fd2's second printf : %s\n", buf);

	exit(0);
}
------------------------------------------------------------------------------------

/* 프로그램 A */
#include <fcntl.h>

main()
{
    int fd;
    char c;
    
    if((fd=open("test.txt",O_RDONLY))<0)
    {
        perror("open");
        exit(0);
    }
    for(;;)
    {
        if(read(fd,&c,1)>0)      
		putchar(c);
        else         
		break;
    }
    exit(0);
} 
/* 프로그램 B */
#include <fcntl.h>
main()
{
	int fd, int linecnt =0;
	char c;
	char *fname = "test.txt";
	
	if((fd=open(fname, O_RDONLY)) < 0)	{
		perror("open( )");
		exit(-1);
	}
	for( ; ; ){
	     if (read(fd, &c, 1) > 0)  {
		if(c=='\n')     	  
			linecnt ++ ;
 	     }else          
		break;
	}
	printf("Total line : %d\n", linecnt);
	exit(0);
}	

똑같은 파일을 두개의 프로그램이 실행했을때 에러가 뜨나 안뜨남 뭐 그런거..ㅋ
------------------------------------------------------------------------------------
#include <unistd.h>
int  dup (int filedes);   //fdt한줄 //fdt번호가 반환댐!!!
int  dup2 (int filedes , int newfiledes);
--------------------------------------------------------------------------------------

#include <fcntl.h>
#include <string.h>
#include <unistd.h>
main()
{
	char *fname = "test.txt";
	int fd1, fd2, cnt;
	char buf[30];
	
	fd1 = open(fname, O_RDONLY);
	if(fd1 < 0) {
		perror("open( )");
		exit (-1);
	}
	fd2 = dup(fd1);		//3,4번줄 같은 값을 가짐. fd번호|flag|pnter
				//fd2는 바뀔 수 있지만 내용을 그대로 복사	
				//fd1으로 오픈하고 fd2에서 편집가능..주소값이 복사되				 므로(주소값은 ft의 줄 주소임)	

program -> fdt-ptr -> ft -> inode (데이터 블록 : 실제 파일이 저장된 주소) -> 읽음

이 파일 읽는 과정을 복사하는게 dup	


	cnt = read(fd1, buf, 12);
	buf[cnt] = '\0';
	printf("fd1's printf : %s\n", buf);
	lseek(fd1, 1, SEEK_CUR);
	cnt = read(fd2, buf, 12);		//cnt fd1과 공유함..ㄷㄷ
					        //fd1이 읽은 뒤부터 읽게됨
	buf[cnt] = '\0';
	printf("fd2's printf : %s\n", buf);
}
----------------------------------------------------------------------------------
#include <fcntl.h>
main()
{
	char *fname = "test.txt";
	int  fd;

	if((fd = creat(fname, 0666)) < 0) {
		perror("creat( )");
		exit(-1);
	}
	printf("First printf is on the screen.\n");	//터미널에 출력
	dup2(fd,1);		//close(1); dup(fd);    //fd ,1번은 표준출력 (콘솔)
							//1번에 3번의 값이 복사되면서 					표준출력이 텍스트가 됨!!!!!!!!!!!!!!!!!
					0번은 입력 1번은 출력 2번은 에러	
	printf("Second printf is in this file.\n");	//test.txt에 출력	
}
---------------------------------------------------------------------------------------
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
int fcntl(int fd, int cmd);
int fcntl(int fd, int cmd, long arg);

//fopen 파일구조체의 주소
//fdt 한줄이 구조체 하나임..
Command ? 수행할 기능의 종류

. F_DUPFD : 파일 디스크립터를 복사. 
. F_GETFD : 파일 디스크립터의 플래그를 반환(현재는 FD_CLOEXEC만 사용)
. F_SETFD : 파일 디스크립터의 플래그를 설정 (FD_CLOEXEC or 0)
. F_GETFL : 파일 테이블에 저장되어 있는 파일 상태 플래그를 반환
. F_SETFL : 파일 상태 플래그의 설정(O_APPEND, O_NONBLOCK, O_SYNC 등을 지정)     
--------------------------------------------------------------------------------------
#include <fcntl.h>
main()
{
	char *fname = "test.txt";
	int fd, newfd;
	int flag;
	
	if((fd = open(fname, O_RDWR | O_APPEND)) < 0)
        {
		perror("open( )");
		exit(-1);
	}
	
        flag = fcntl(fd, F_GETFL, 0);
	if (flag & O_APPEND)
		printf("fd: O_APPEND flag is set. \n");
	else	
		printf("fd: O_APPEND flag is NOT set. \n");
	flag = fcntl(fd, F_GETFD, 0);
	if (flag & FD_CLOEXEC)
		printf("fd: FD_CLOEXEC flag is set. \n");
	else	
		printf("fd: FD_CLOEXEC flag is NOT set. \n");


	fcntl(fd, F_SETFD, FD_CLOEXEC);
	flag = fcntl(fd, F_GETFD, 0);
	if (flag & FD_CLOEXEC)
		printf("fd: FD_CLOEXEC flag is set. \n");
	else	
		printf("fd: FD_CLOEXEC flag is NOT set. \n");
}	
-------------------------------------------------------------------------------------
