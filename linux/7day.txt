1. 입출력 표준 라이브러리

FILE 구조체
FILE Structure
typedef  struct _iobuf
{
	int  _cnt; //버퍼에 남아있는 잔량
	unsigned  char *_ptr; //오프셋
	unsigned char *_base; //버퍼의 시작주소
	unsigned char _flag; 
	unsigned char _file; 
} FILE ;
       
       . _cnt: 버퍼에 남아있는 문자 수
       . _ptr : _base가 가리키는 포인터에서 다음에 읽거나 쓸 문자의 위치
       . _base : 스트림과 관련된 버퍼의 시작주소
       . _flag : 읽기 ,쓰기 모드와 에러 상태등의 제어정보
       . _file :   스트림과 연관된 file descriptor
-----------------------------------------------------------------------------
#include <stdio.h>
FILE *fopen (const char *pathname, const char *type); 
type : rt(텍스트) or rb(바이너리)..텍스트는 t 생략가능(텍스트 읽기), w(텍스트 쓰기), 
	a(텍스트 이어쓰기)
	rb(이진 읽기), wb(이진 쓰기), ab(이진 이어쓰기)
	r+(읽고 쓰기), w+(읽고 덮어 쓰기), a+(읽고 이어쓰기) //해당 파일이 없을경우 만듬
------------------------------------------------------------------------------
#include <stdio.h>

main()
{
	FILE  *fp;
	
	if((fp = fopen("test.txt", "r")) != NULL)
	{
		printf("Success !\n");
		printf("Opening \"test.txt\" in \"r\" mode !\n");
	}
	else 
	{
		perror("Error");
		exit(-1);
	}
	fclose(fp);
}
---------------------------------------------------------------------------------
#include <stdio.h>
FILE *freopen (const char *pathname, const char *type, FILE *fp );
-dup2처럼 경로를 바꿔주는것
-fp가 가리키는 스트림으로 파일 개방
FILE *fdopen (int filedes, const char *type);
-저수준 오픈을 고수준(라이브러리 함수)로 다시 오픈
-이미 열려진 file descriptor에 대해 표준 입출력 스트림으로 연결
----------------------------------------------------------------------------------
#include <fcntl.h>
#include <stdio.h>
main()
{
	char *fname = "test.txt";
	FILE  *fp;

	printf("First printf is on the screen.\n");	
	if((fp = freopen(fname, "w", stdout)) == NULL) 
	{
		perror("freopen");
		exit(-1);
	}
	printf("Second printf is in this file.\n");	
}	
-----------------------------------------------------------------------------------
#include <fcntl.h>
#include <stdio.h>
main()
{
	char *fname = "test.txt";
	int  fd;
	FILE *fp;

	if((fd = open(fname, O_RDONLY)) > 0) 
		printf("Success!! \n File descriptor : %d\n",fd);
	else
	  printf("failed\n");
	  
	if(( fp = fdopen(fd,"r"))!= NULL)
	  printf("fdopen() Success!!\n");
	else
	  printf("fdopen() failed\n");
	  
	fclose(fp);
}	
---------------------------------------------------------------------------------
#include <stdio.h>
int fclose ( FILE *fp );
---------------------------------------------------------------------------------
문자 한개 읽는 함수들
#include <stdio.h>
int getc (FILE *fp );
int fgetc (FILE *fp );
int getchar (void );
----------------------------------------------------------------------------------
읽어들인 문자를 원위치
#include <stdio.h>
int ungetc(int c, FILE *stream);
----------------------------------------------------------------------------------
test.txt
123+45
----------
#include <stdio.h>
main()
{
	int c, number = 0;
	char op;
	FILE  *fp;
	
	if((fp = fopen("test.txt", "r")) == NULL) 
	{
		perror("File open error");  
		exit(-1);
	}
	
	while(!feof(fp)) 
	{
		while ((c = fgetc(fp)) != EOF && isdigit(c)) //숫자인지 판단
			number = 10 * number + c - '0';
	
		if(c == '\n')
			continue;
				
		fprintf(stdout,"Operand =>  %d\n", number);
		number = 0;
		
		if(c != EOF)	//endof file
		{
			ungetc(c,fp); //하나를 앞으로 보냄
			op = fgetc(fp);
			fprintf(stdout,"Operator => %c\n",op);
		}
	}
	fclose(fp);
}
	
------------------------------------------------------------------------------------
문자 한개 출력 함수
#include <stdio.h>
int putc (int c, FILE *fp );
int fputc (int c, FILE *fp );
int putchar (int c );
-----------------------------------------------------------------------------------
한라인 입력 함수
#include <stdio.h>
char *fgets (char  *buf, int  n, FILE *fp );
char *gets (char *buf );
-------------------------------------------------------------------------------------
한라인 출력 함수
#include <stdio.h>
int fputs (const char  *str, FILE *fp );
int  puts (const char *str);
-------------------------------------------------------------------------------------
./실행명 파일명
#include <stdio.h>
main (int argc,char *argv[])
{
	FILE  *fp;
	char buf[256];
	if((fp = fopen(argv[1], "w+")) == NULL)
	{
		perror("fopen error");	
		exit(-1);
	}
	
	fputs("Input String >> ", stdout);
	gets(buf);			/* '\n' 제거 */
	fputs(buf,fp);		/* '\n'이 없는 상태 */
	rewind(fp);		//커서를 맨앞으로 옮기는 함수
	fgets(buf, sizeof(buf), fp);	/* '\n'이 없는 상태 */
	puts(buf);			/* '\n' 추가 */

	fclose(fp);
}
-------------------------------------------------------------------------------------
#include <stdio.h>
size_t fread (void *ptr, size_t  size, size_t  nobj, FILE *fp ); nobi 구조체 개수
size_t fwrite (const void *ptr, size_t  size, size_t  nobj, FILE *fp );
-------------------------------------------------------------------------------------
#include <stdio.h>

struct student {
	int sno;
	char name[10];
	int point;
};

main()
{
	struct student s1, s2;
	FILE *fp;
	
	if((fp = fopen("student.dat", "w")) == NULL) {
		perror("fopen error");
		exit(-1);
	}
	printf("Input SNO >> ");
	scanf("%d", &s1.sno);
	printf("Input Name >> ");
	scanf("%s", &s1.name);
	printf("Input Point >> ");
	scanf("%d", &s1.point);
	if(fwrite(&s1, sizeof(struct student), 1, fp) != 1) {
		perror("fwrite error");
		exit(-1);
	}
	fclose(fp);	
	
	if((fp = fopen("student.dat", "r")) == NULL) {
		perror("fopen error");
		exit(-1);
	}
	if(fread(&s2, sizeof(struct student), 1, fp) != 1) {
		perror("fread error");
		exit(-1);
	}
	printf("\n NO        Name      Point\n");
	printf("====================\n");
	printf("%d       %s      %d\n", s2.sno, s2.name, s2.point);
	fclose(fp);
}	

------------------------------------------------------------------------------------------
#include <stdio.h>
long ftell (FILE *fp ); //읽고쓴 위치값을 반환
int fseek (FILE *fp, long offset, int whence ); //SEEK_SET, SEEK_CUR, SEEK_END
void rewind (FILE *fp);
----------------------------------------------------------------------------------------
#include <stdio.h>

main()
{
    char *fname = "test.txt";
    long fsize;
    FILE *fp;
    
    if((fp=fopen(fname,"r"))==NULL){
        printf("File Open Error\n");
        exit(-1);
    }
    fseek(fp,0L,SEEK_END);
    fsize = ftell(fp);
    
    printf("The size of <%s> is %ld byte.\n",fname,fsize);
    exit(0);
}
----------------------------------------------------------------------------------------
#include <stdio.h>

main()
{
    char *fname = "test.txt";
    long position;
    int ch;
    FILE *fp;
    
    if((fp=fopen(fname,"r"))==NULL){
        printf("File Open Error\n");
        exit(-1);
    }
    
    printf(" Input number >> ");
    scanf("%ld",&position);
    
    fseek(fp,position-1L,SEEK_SET);
    ch = getc(fp);
    printf("%ldth character => %c\n",position,ch);
    
    exit(0);
}
-----------------------------------------------------------------------------------------
#include <stdio.h>

main()
{
    char *fname = "test.txt";
    long position;
    FILE *fp;
    
    if((fp=fopen(fname,"r"))==NULL){
        printf("File Open Error\n");
        exit(-1);
    }
        
    fseek(fp,10L,SEEK_CUR);
    position = ftell(fp);
    printf("Current position = %ld\n",position);
    
    rewind(fp);
    position = ftell(fp);
    printf("After rewind() position = %ld\n",position);
    
    exit(0);
}
---------------------------------------------------------------------------------------
#include <stdio.h>
int fgetpos (FILE *fp, fpos_t  *pos );	//구조체 fpos_t타입을 이용
int fsetpos (FILE *fp, const fpos_t *pos );
---------------------------------------------------------------------------------------
#include <stdio.h>

int main(void)
{
	FILE  *fp;
	fpos_t position;
	int i;

	fp=fopen("sample.txt", "wt");

	for(i=0;i<100;i++)
		putc('A',fp);

	fgetpos(fp,&position);
	printf("position: %ld\n",position);

	rewind(fp);
	fsetpos(fp,&position);
	printf("position: %ld\n",position);

	fclose(fp);

	return 0;
}
--------------------------------------------------------------------------------------
#include <stdio.h>
int ferror (FILE *fp);		//트루 폴스로 반환냄
int feof (FILE  *fp);
void clearerr (FILE *fp);	//파일을 오픈하거나 읽고 쓸때 에러 비트를 초기ㅗ하
						
--------------------------------------------------------------------------------------
#include <stdio.h>

main(int argc,char *argv[])
{
    FILE *fp;
    int  ch;
    
    if((fp=fopen(argv[1],"r"))==NULL){
        printf("File open error!!\n");
        exit(-1);
    }
    
    while(!feof(fp)){
        ch = fgetc(fp);
        fputc(ch,stdout);
        
        if(ferror(fp)){
            printf("Error detected !!\n");
            clearerr(fp);
        }
    }
    fclose(fp);
} 	
----------------------------------------------------------------------------------------
#include <stdio.h> //표준 입출력은 버프가 제공됨..(라인버퍼 풀버퍼 노버퍼) 모드
표준입출력은 라인버퍼임.. -> 화이트스페이스가 구분자. 스페이스 탭 엔터
풀버퍼 -> 버퍼가 가득찰 때 까지 

void  setbuf (FILE *fp, char *buf );
//버퍼를 내가 지정해 줄꺼얌..
int  setvbuf (FILE *fp, char *buf,  int  mode, size_t size );
//버퍼를 내가 줄건데 모드도 줄거야..size_t 는 버퍼의 크기임 
---------------------------------------------------------------------------------------
#include <stdio.h>
int  fflush (FILE *fp);
//버퍼를 강제로 비움. =>강제로 출력
네트워크를 할때 많이씀-원격 컴퓨터에 출력->강제적으로 쓰기도함
//엔터를 안넣고 강제로 내보내고 싶을때 씀
------------------------------------------------------------------------------------
형식화된 출력 함수
#include <stdio.h>
int printf (const char *format,…);
int fprintf (FILE  *fp, const char *format,…);
//스트림에다 출력
int sprintf (char  *buf ,const char *format,…);
//메모리에다가 출력. 씨에서 문자열 연결에 많이씀

//...은 가변 변수 이름이 없어서 포인터로 접근
-----------------------------------------------------------------------------------
#include <stdarg.h>
#include <stdio.h>
int vprintf (const char *format, va_list  arg );
int vfprintf (FILE  *fp, const char *format, va_list arg );
int vsprintf (char  *buf ,const char *format, va_list  arg ); 
--------------------------------------------------------------------------------------
int add(int c,...)
{
	int sum=0;
	int i;
	for (i=1;i<=c;i++)
	{
		sum+=(&c)[i];
	}
	return sum;
}

void main()
{
printf("sum=%d",add(3,1,2,3));
printf("sum=%d",add(5,1,2,3,4,5));
}
-------------
#include <stdio.h>
#include <stdarg.h>

int vpf(char *fmt,...)
{
	va_list  argptr;//가변인자를 담을 변수 list
	int cnt;
	
	va_start (argptr, fmt); //fmt포맷
	cnt = vprintf (fmt, argptr); //cnt 는 출력한 문자수 ㅡ 
	va_end (argptr);
	return  cnt;
}

int main(void)
{
         int i = 30;
         float f = 90.0;
         char *s = "abc";
         vpf("%d, %f, %s\n", i, f, s);
}
-------------------------------------------------------------------------------------
#include <stdio.h>
int scanf (const char *format,…);
int fscanf (FILE  *fp, const char *format,…);
int sscanf (const char  *buf ,const char *format,…);
